services:
  idea-backend:
    container_name: idea-backend-dev
    build:
      context: . # Change context to the root directory
      dockerfile: ./idea-discussion/backend/Dockerfile # Specify Dockerfile path relative to new context
      target: development # Build the development stage
    volumes:
      - ./idea-discussion/backend:/app/idea-discussion/backend # Mount source code for hot-reload
      # Exclude node_modules from the host mount to use the container's node_modules
      - /app/idea-discussion/backend/node_modules
    ports:
      - "3000:3000" # Expose backend API port
    depends_on:
      - mongo
    env_file:
      - .env # Load environment variables from .env file
    environment:
      - NODE_ENV=development
      # Override MONGODB_URI for Docker network
      - MONGODB_URI=mongodb://mongo:27017/idea_discussion_db # Use service name 'mongo'
      # Explicitly pass GitHub and OpenRouter variables from .env
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_INSTALLATION_ID=${GITHUB_INSTALLATION_ID}
      - GITHUB_TARGET_OWNER=${GITHUB_TARGET_OWNER}
      - GITHUB_TARGET_REPO=${GITHUB_TARGET_REPO}
      - GITHUB_BASE_BRANCH=${GITHUB_BASE_BRANCH}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - IDEA_CORS_ORIGIN=${IDEA_CORS_ORIGIN}
      - JWT_SECRET=${JWT_SECRET} # Pass JWT secret from .env
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1d} # Pass expiration, default to 1 day
      - ALLOW_DELETE_THEME=${ALLOW_DELETE_THEME} # Pass theme deletion control
    # Use the CMD defined in the Dockerfile's development stage
    command: npm run dev

  # --- policy-edit ---
  policy-frontend:
    container_name: policy-frontend-dev
    image: node:20-alpine # Use a base image, Vite runs on host via volume mount
    working_dir: /app
    volumes:
      - ./policy-edit/frontend:/app
      # Add node_modules volume
      - /app/node_modules
    ports:
      - "5174:5173" # Expose Vite dev server port (Host: 5174, Container: 5173)
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0" # Install deps if needed and run dev server
    env_file:
      - .env # Load environment variables from .env file
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=${POLICY_FRONTEND_API_BASE_URL} # Use variable from .env
      # Map GITHUB_TARGET_* from .env to VITE_GITHUB_* for the frontend
      - VITE_GITHUB_REPO_OWNER=${GITHUB_TARGET_OWNER}
      - VITE_GITHUB_REPO_NAME=${GITHUB_TARGET_REPO}
      - VITE_POLICY_FRONTEND_ALLOWED_HOSTS=${VITE_POLICY_FRONTEND_ALLOWED_HOSTS}
      # GitHub Mock Client Configuration
      - VITE_USE_MOCK_GITHUB_CLIENT=${VITE_USE_MOCK_GITHUB_CLIENT}
      # Site configuration
      - VITE_SITE_NAME=${VITE_SITE_NAME}
      - VITE_SITE_DESCRIPTION=${VITE_SITE_DESCRIPTION}
      - VITE_SITE_URL=${VITE_SITE_URL}
      - VITE_SITE_OG_IMAGE_URL=${VITE_SITE_OG_IMAGE_URL}
      - VITE_SITE_LOGO_URL=${VITE_SITE_LOGO_URL}
      - VITE_FAVICON_URL=${VITE_FAVICON_URL}
      - VITE_PRIMARY_COLOR=${VITE_PRIMARY_COLOR}
      # Color theme variables
      - VITE_COLOR_BG_SUB=${VITE_COLOR_BG_SUB}
      - VITE_COLOR_ACCENT=${VITE_COLOR_ACCENT}
      - VITE_COLOR_ACCENT_LIGHT=${VITE_COLOR_ACCENT_LIGHT}
      - VITE_COLOR_ACCENT_SUPER_LIGHT=${VITE_COLOR_ACCENT_SUPER_LIGHT}
      - VITE_COLOR_ACCENT_DARK=${VITE_COLOR_ACCENT_DARK}
      - VITE_COLOR_PRIMARY=${VITE_COLOR_PRIMARY}
      - VITE_COLOR_SECONDARY=${VITE_COLOR_SECONDARY}

  policy-backend:
    container_name: policy-backend-dev
    build:
      context: . # Change context to the root directory
      dockerfile: ./policy-edit/backend/Dockerfile # Specify Dockerfile path relative to new context
      target: production # Build the production stage
    ports:
      - "3001:3001" # Expose backend API port
    env_file:
      - .env # Load environment variables from .env file
    environment:
      - NODE_ENV=development
      # Ensure CORS allows the frontend origin (running on host port 5174)
      - POLICY_CORS_ORIGIN=${POLICY_CORS_ORIGIN}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres-policy:5432/${POSTGRES_DB:-policy_db}
    depends_on:
      - postgres-policy
    # Run the production start command
    command: npm start

  postgres-policy:
    container_name: postgres-policy-dev
    image: postgres:latest
    ports:
      - "5433:5432" # Expose to host port 5433 to avoid conflict if local 5432 is used
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-policy_db}
    volumes:
      - postgres_policy_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-policy_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Unified Frontend ---
  frontend:
    container_name: frontend-dev
    image: node:20-slim
    working_dir: /app
    volumes:
      - ./frontend:/app
      # Add node_modules volume
      - /app/node_modules
    ports:
      - "5173:5173" # idea-discussion/backendのCORS設定に合わせたポート
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - VITE_IDEA_FRONTEND_API_BASE_URL=${IDEA_FRONTEND_API_BASE_URL} # 初期段階ではidea-discussionのAPIを使用
      - VITE_FRONTEND_ALLOWED_HOSTS=${VITE_FRONTEND_ALLOWED_HOSTS}

  # --- Database ---
  mongo:
    container_name: mongo-dev
    image: mongo:latest
    ports:
      - "27017:27017" # Expose MongoDB port to host (optional, for external tools)
    volumes:
      - mongo_data:/data/db # Persist data using a named volume

  # --- Admin Panel ---
  admin:
    container_name: admin-dev
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./admin:/app
      - /app/node_modules
    ports:
      - "5175:5175"
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - VITE_ADMIN_FRONTEND_API_BASE_URL=${ADMIN_API_BASE_URL} # idea-discussionバックエンドを指す
      - VITE_ADMIN_FRONTEND_ALLOWED_HOSTS=${VITE_ADMIN_FRONTEND_ALLOWED_HOSTS}
      - VITE_ALLOW_DELETE_THEME=${ALLOW_DELETE_THEME}

  # --- Python Embedding Service ---
  python-service:
    container_name: idobata-python-service
    build:
      context: ./python-service
    ports:
      - "8000:8000" # Expose port for debugging
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY} # Pass from host environment
    volumes:
      - ./python-service:/app # Mount source code for development
      - chroma_data:/data/chroma # ChromaDB data persistence

  nginx:
    container_name: nginx-prod
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443" # Uncomment if you configure SSL in nginx.conf
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Uncomment the following lines if you set up SSL certificates
      # - ./path/to/your/certs:/etc/nginx/certs:ro
    depends_on:
      - idea-backend
      - policy-frontend
      - policy-backend
      - frontend
      - admin
      - python-service
    restart: always

volumes:
  mongo_data: # Define the named volume for MongoDB
  chroma_data: # Define the named volume for ChromaDB
  postgres_policy_data:
    # Define the named volume for policy PostgreSQL
    # Named volume for idea_backend_node_modules removed as we're using the multi-stage build approach
